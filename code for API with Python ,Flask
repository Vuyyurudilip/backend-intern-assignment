from flask import Flask, jsonify, request
import pymysql
from datetime import datetime
app = Flask(__name__)
db = pymysql.connect(host='localhost', user='username', password='password of your mysql', database='database name')
class Task:
    def __init__(self, title, description, due_date, status):
        self.title = title
        self.description = description
        self.due_date = due_date
        self.status = status
@app.route('/tasks', methods=['POST'])
def create_task():
    data = request.get_json()
    title = data['title']
    description = data['description']
    due_date_str = data['due_date']
    due_date = datetime.strptime(due_date_str, '%Y-%m-%d').date()
    status = data['status']
    cursor = db.cursor()
    cursor.execute(
        "INSERT INTO "tablename" (title, description, due_date, status) VALUES (%s, %s, %s, %s)",
        (title, description, due_date, status)
    )
    db.commit()
    cursor.close()
    return jsonify({'message': 'Task created successfully'}), 201
@app.route('/tasks/<int:task_id>', methods=['GET'])
def get_task(task_id):
    cursor = db.cursor()
    cursor.execute("SELECT * FROM tasks WHERE id = %s", (task_id,))
    task = cursor.fetchone()
    cursor.close()
    if task:
        task_data = {
            'id': task[0],
            'title': task[1],
            'description': task[2],
            'due_date': task[3],
            'status': task[4]
        }
        return jsonify(task_data), 200
    else:
        return jsonify({'message': 'Task not found'}), 404
@app.route('/tasks/<int:task_id>', methods=['PUT'])
def update_task(task_id):
    data = request.get_json()
    title = data['title']
    description = data['description']
    due_date = data['due_date']
    status = data['status']
    cursor = db.cursor()
    cursor.execute(
        "UPDATE tasks SET title = %s, description = %s, due_date = %s, status = %s WHERE id = %s",
        (title, description, due_date, status, task_id)
    )
    db.commit()
    cursor.close()
    return jsonify({'message': 'Task updated successfully'}), 200
@app.route('/tasks/<int:task_id>', methods=['DELETE'])
def delete_task(task_id):
    cursor = db.cursor()
    cursor.execute("DELETE FROM tasks WHERE id = %s", (task_id,))
    db.commit()
    cursor.close()
    return jsonify({'message': 'Task deleted successfully'}), 200
@app.route('/tasks', methods=['GET'])
def list_tasks():
    cursor = db.cursor()
    cursor.execute("SELECT * FROM tasks")
    tasks = cursor.fetchall()
    cursor.close()
    task_list = []
    for task in tasks:
        task_data = {
            'id': task[0],
            'title': task[1],
            'description': task[2],
            'due_date': task[3],
            'status': task[4]
        }
        task_list.append(task_data)
    return jsonify(task_list), 200

if __name__ == '__main__':
    app.run(debug=True)
